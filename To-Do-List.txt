import tkinter as tk
from tkinter import messagebox

class ToDoListApp:
    def __init__(self, root):
        # Initialize the main window
        self.root = root
        self.root.title("To-Do List")
        self.root.geometry("400x500")
        self.root.configure(bg="black")

        # List to store tasks
        self.tasks = []

        # Title label
        self.title_label = tk.Label(root, text="To-Do List", bg="black", fg="white", font=("Helvetica", 18))
        self.title_label.pack(pady=10)

        # Entry widget for new tasks
        self.task_entry = tk.Entry(root, bg="gray20", fg="white", font=("Helvetica", 14), insertbackground="white")
        self.task_entry.pack(pady=10)

        # Button to add tasks
        self.add_button = tk.Button(root, text="Add Task", bg="gray30", fg="white", font=("Helvetica", 12), command=self.add_task)
        self.add_button.pack(pady=10)

        # Listbox to display tasks
        self.tasks_listbox = tk.Listbox(root, bg="black", fg="white", font=("Helvetica", 12), selectbackground="gray30")
        self.tasks_listbox.pack(pady=10, fill=tk.BOTH, expand=True)

        # Button to update selected task
        self.update_button = tk.Button(root, text="Update Task", bg="gray30", fg="white", font=("Helvetica", 12), command=self.update_task)
        self.update_button.pack(pady=10)

        # Button to delete selected task
        self.delete_button = tk.Button(root, text="Delete Task", bg="gray30", fg="white", font=("Helvetica", 12), command=self.delete_task)
        self.delete_button.pack(pady=10)

    def add_task(self):
        # Get the task from the entry widget
        task = self.task_entry.get()
        if task != "":
            # Add task to the list and update the display
            self.tasks.append(task)
            self.update_tasks()
            # Clear the entry widget
            self.task_entry.delete(0, tk.END)
        else:
            # Show a warning if the entry is empty
            messagebox.showwarning("Warning", "You must enter a task.")

    def update_task(self):
        try:
            # Get the index of the selected task
            selected_task_index = self.tasks_listbox.curselection()[0]
            # Get the updated task from the entry widget
            updated_task = self.task_entry.get()
            if updated_task != "":
                # Update the task in the list and update the display
                self.tasks[selected_task_index] = updated_task
                self.update_tasks()
                # Clear the entry widget
                self.task_entry.delete(0, tk.END)
            else:
                # Show a warning if the entry is empty
                messagebox.showwarning("Warning", "You must enter a task.")
        except IndexError:
            # Show a warning if no task is selected
            messagebox.showwarning("Warning", "You must select a task to update.")

    def delete_task(self):
        try:
            # Get the index of the selected task
            selected_task_index = self.tasks_listbox.curselection()[0]
            # Remove the task from the list and update the display
            self.tasks.pop(selected_task_index)
            self.update_tasks()
        except IndexError:
            # Show a warning if no task is selected
            messagebox.showwarning("Warning", "You must select a task to delete.")

    def update_tasks(self):
        # Clear the listbox and add all tasks from the list with numbering
        self.tasks_listbox.delete(0, tk.END)
        for index, task in enumerate(self.tasks):
            numbered_task = f"{index + 1}. {task}"
            self.tasks_listbox.insert(tk.END, numbered_task)

if __name__ == "__main__":
    # Create the main window and run the application
    root = tk.Tk()
    app = ToDoListApp(root)
    root.mainloop()
